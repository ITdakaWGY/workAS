package com.as.occupationaldseases.service;

import com.as.occupationaldseases.common.response.CommonCode;
import com.as.occupationaldseases.common.response.QueryResponseResult;
import com.as.occupationaldseases.common.response.QueryResult;
import com.as.occupationaldseases.dao.TjHazardItemMapper;
import com.as.occupationaldseases.domain.tjHazardItem.TjHazardItem;
import com.as.occupationaldseases.domain.tjHazardItem.responce.TjHazardItemCode;
import com.as.occupationaldseases.domain.tjHazardItem.responce.TjHazardItemResult;
import com.as.occupationaldseases.exception.ExceptionCast;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

@Service
public class TjHazardItemService {
    @Resource
    private TjHazardItemMapper tjHazardItemMapper;

    //新增
    public TjHazardItemResult add(TjHazardItem tjHazardItem) {
        if (tjHazardItem == null) {
            //抛出异常，非法参数异常..指定异常信息的内容
            return new TjHazardItemResult(CommonCode.INVALID_PARAM, null);
        }

        //校验用户Id的唯一性
        //根据用户Id集合，如果查到说明此用户已经存在，如果查询不到再继续添加
        TjHazardItem tjHazardItem1 = tjHazardItemMapper.selectById(tjHazardItem.getId());
        if (tjHazardItem1 != null) {
            //用户已经存在
            //抛出异常，异常内容就是用户已经存在
            ExceptionCast.cast(TjHazardItemCode.TJHAZARDITEM_ADD_EXISTSNAME);
        }
        //调用dao新增用户
        tjHazardItemMapper.insert(tjHazardItem);
        return new TjHazardItemResult(CommonCode.SUCCESS, tjHazardItem);
    }

    /**
     * 分页查询方法
     *
     * @param current     页码，从1开始记数
     * @param size        每页记录数
     * @param tjHazardItem 查询条件
     * @return
     */
    public QueryResponseResult findList(int current, int size, TjHazardItem tjHazardItem) {
        if (tjHazardItem == null) {
            tjHazardItem = new TjHazardItem();
        }
        //分页参数
        if (current <= 0) {
            current = 1;
        }
//        current = current - 1;

        if (size <= 0) {
            size = 10;
        }
        IPage<TjHazardItem> page = new Page<>(current, size);
        QueryWrapper<TjHazardItem> wrapper = new QueryWrapper<>();
        wrapper.setEntity(tjHazardItem);

        IPage<TjHazardItem> companyinfoIPage = tjHazardItemMapper.selectPage(page, wrapper);
        QueryResult queryResult = new QueryResult();

        queryResult.setList(companyinfoIPage.getRecords());//数据列表
        queryResult.setTotal(companyinfoIPage.getTotal());//数据总记录数
        QueryResponseResult queryResponseResult = new QueryResponseResult(CommonCode.SUCCESS, queryResult);
        return queryResponseResult;
    }



    //根据id删除
    public TjHazardItemResult delete(int id) {
        //先查询一下
        TjHazardItem tjHazardItem = tjHazardItemMapper.selectById(id);
        if (tjHazardItem != null) {
            tjHazardItemMapper.deleteById(id);
            return new TjHazardItemResult(CommonCode.SUCCESS, tjHazardItem);
        }
        return new TjHazardItemResult(TjHazardItemCode.TJHAZARDITEM_NOTEXISTS, null);
    }


}
