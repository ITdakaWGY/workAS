package com.as.occupationaldseases.service;

import com.as.occupationaldseases.common.response.CommonCode;
import com.as.occupationaldseases.common.response.QueryResponseResult;
import com.as.occupationaldseases.common.response.QueryResult;
import com.as.occupationaldseases.dao.SigninfoMapper;
import com.as.occupationaldseases.domain.companyinfo.Companyinfo;
import com.as.occupationaldseases.domain.signinfo.Signinfo;
import com.as.occupationaldseases.domain.signinfo.responce.SigninfoResult;
import com.as.occupationaldseases.domain.user.responce.UserCode;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.util.Map;

import javax.annotation.Resource;
import java.util.List;

@Service
public class SigninfoService {
   @Resource
   SigninfoMapper signinfoMapper;



    /**
     * 新增
     * @param signinfo
     * @return
     */
   public SigninfoResult  add(Signinfo signinfo,String path,String newPath){
       if (signinfo==null) {
           return new SigninfoResult(CommonCode.INVALID_PARAM,null);
       }
       //调用新增
       signinfo.setId(null);
       //处理文件
       fileHandle(signinfo,path,newPath);
       signinfoMapper.insert(signinfo);
       return  new SigninfoResult(CommonCode.SUCCESS,signinfo);
   }

    /**
     * 处理文件
     * @param signinfo
     * @param path
     * @param newPath
     */
   private void fileHandle(Signinfo signinfo,String path,String newPath){
       File beforeFile = new File(path+signinfo.getQybh());
       File newFile = new File(newPath+signinfo.getQybh());
       CopyFolder(beforeFile,newFile,0);
       if (signinfo.getProtocol()!=null&&signinfo.getProtocol().length()>0)
           signinfo.setProtocol(signinfo.getProtocol().replace("Signing","newSigning"));
       if (signinfo.getQtcl()!=null&&signinfo.getQtcl().length()>0)
           signinfo.setQtcl(signinfo.getQtcl().replace("Signing","newSigning"));
       //清空文件
       deleteDir(path);
   }

    /**
     * 修改
     * @param id
     * @param signinfo
     * @return
     */
   public SigninfoResult update(Long id,Signinfo signinfo,String path,String newPath){
       Signinfo signinfo1 = signinfoMapper.selectById(id);
       if (signinfo1!=null) {
           //清空原文件
           deleteDir(newPath+signinfo.getQybh());
           //处理文件
           fileHandle(signinfo,path,newPath);
           signinfoMapper.updateById(signinfo);
           return  new SigninfoResult(CommonCode.SUCCESS,signinfo);
       }
       //修改失败
       return new SigninfoResult(UserCode.USER_NOTEXISTS,null);
   }

    /**
     * 删除
     * @param id
     * @return
     */
   public SigninfoResult delete(Long id ){

       Signinfo signinfo1 = signinfoMapper.selectById(id);
       if (signinfo1!=null) {
           signinfoMapper.deleteById(id);
           return new SigninfoResult(CommonCode.SUCCESS,signinfo1);
       }
       return  new SigninfoResult(UserCode.USER_NOTEXISTS,null);
   }

    /**
     * 查询
     * @param signinfo
     * @return
     */

   public  QueryResponseResult select(Signinfo signinfo){
       QueryWrapper<Signinfo> wrapper = new QueryWrapper<>();
       wrapper.setEntity(signinfo);
       List<Signinfo> signinfoList = signinfoMapper.selectList(wrapper);
       QueryResult queryResult = new QueryResult();
       queryResult.setList(signinfoList);//数据列表
       queryResult.setTotal(signinfoList.size());//数据总记录数
       QueryResponseResult queryResponseResult = new QueryResponseResult(CommonCode.SUCCESS,queryResult);
       return queryResponseResult;
   }


    /**
     * @param current 页码，从1开始记数
     * @param size 每页记录数
     * @param params 条件
     * @return
     */
    public QueryResponseResult findList(int current, int size, Map<String,Object> params){
        //分页参数
        if(current <=1){
            current = 0;
        } if (current > 1)
            current = current*10-10;


        if(size<=0){
            size = 10;
        }

        QueryResult queryResult = new QueryResult();
        queryResult.setTotal(signinfoMapper.queryCount(params));
        String page = current+","+size;
        params.put("page",page);
        List<Signinfo> signinfoList = signinfoMapper.queryStuBaseByXmlPage(params);
        queryResult.setList(signinfoList);

        QueryResponseResult queryResponseResult = new QueryResponseResult(CommonCode.SUCCESS,queryResult);
        return queryResponseResult;
    }

    public String fileUpload(MultipartFile[] files,String qybh,String path) {
        String route = "";
        for (MultipartFile file:files) {
            String name = file.getOriginalFilename();
              //获取文件后缀名
            String suffix = name.substring(name.lastIndexOf("."));
            String str = System.currentTimeMillis()+suffix;
            String newPath = path+qybh;
            //文件的存储路径加上文件
            String newName = newPath+"\\"+str;
            route += newName+",";
            System.out.println("文件的路径是："+newName);
            try {

                File file1 = new File(newName);
                if(!file1.exists()&&!file1.isDirectory()) {
                    file1.mkdirs();
                }
                file.transferTo(file1);
            } catch (IOException e) {
                e.printStackTrace();
            }
            System.out.println("文件名称："+name);
        }
        route = route.substring(0,route.length()-1);
        System.out.println("文件的上传路径："+route);
        return  route;
     }



    /**
     * 复制文件夹
     * @param file 原来的路径
     * @param file2 现在的路径
     * @param count
     * @throws Exception
     */
    public static void CopyFolder(File file, File file2, int count) {

        if(!file2.exists()&&!file2.isDirectory()) {
            file2.mkdirs();
        }
        if (file.isDirectory()) {
            File gFile;
            if (count != 0) {// 判断是否是第一个文件夹,否则会多复制一层文件夹
                gFile = new File(file2, file.getName());
                gFile.mkdirs();// 创建目标文件夹的根文件夹
            } else {// 若不是则和源文件夹相同
                gFile = file2;// 则目标文件夹的路径即为要复制的文件夹
                count++;
            }
            // 遍历复制文件夹
            File[] files = file.listFiles();// 遍历目标文件下所有文件夹
            for (File tfile : files) {
                CopyFolder(tfile, gFile, count);// 递归调用复制文件夹
            }
        } else {
            File wFile = new File(file2, file.getName());// 若是文件，创建新的文件，调用文件复制
            // wFile.createNewFile();//目标文件需要新建,可以不需要，因为是调用父类文件夹创建，里面文件会自动创建
            try {
                CopyFile(file, wFile);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * 复制文件
     * @param file
     * @param file2
     * @throws Exception
     */
    public static void CopyFile(File file, File file2) throws Exception {
        FileInputStream fis = new FileInputStream(file);
        FileOutputStream fos = new FileOutputStream(file2);
        byte[] bs = new byte[1024];
        int n = 0;
        while ((n = fis.read(bs)) != -1) {
            fos.write(bs, 0, n);
        }
        fos.close();
    }

    /**
     * 删除文件
     * @param path
     * @return
     */
    public static boolean deleteDir(String path){
        File file = new File(path);
        if(!file.exists()){//判断是否待删除目录是否存在
            System.err.println("The dir are not exists!");
            return false;
        }

        String[] content = file.list();//取得当前目录下所有文件和文件夹
        for(String name : content){
            File temp = new File(path, name);
            if(temp.isDirectory()){//判断是否是目录
                deleteDir(temp.getAbsolutePath());//递归调用，删除目录里的内容
                temp.delete();//删除空目录
            }else{
                if(!temp.delete()){//直接删除文件
                    System.err.println("Failed to delete " + name);
                }
            }
        }
        return true;
    }
}
