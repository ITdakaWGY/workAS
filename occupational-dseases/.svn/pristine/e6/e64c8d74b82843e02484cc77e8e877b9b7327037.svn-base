package com.as.occupationaldseases.service;

import com.as.occupationaldseases.common.response.*;
import com.as.occupationaldseases.domain.companyinfo.Companyinfo;
import com.as.occupationaldseases.domain.diseaseItem.DiseaseItem;
import com.as.occupationaldseases.domain.diseaseItem.DiseaseItemRelation;
import com.as.occupationaldseases.domain.hazardinfo.HazardinfoRelation;
import com.as.occupationaldseases.utils.ExcelUtils;
import com.as.occupationaldseases.utils.FileFactory;
import com.as.occupationaldseases.dao.*;
import com.as.occupationaldseases.domain.grjbxx.*;
import com.as.occupationaldseases.domain.grjbxx.responce.GrjbxxResult;
import com.as.occupationaldseases.domain.user.responce.UserCode;
import com.as.occupationaldseases.utils.FileUtil;
import com.as.occupationaldseases.utils.StringUtil;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Resource;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;


@Service
public class GrjbxxService {
    @Resource
    GrjbxxMapper grjbxxMapper;
    @Resource
    GrjbxxSxMapper grjbxxSxMapper;
    @Resource
    GrjbxxSsMapper grjbxxSsMapper;
    @Resource
    GrjbxxWsMapper grjbxxWsMapper;
    @Resource
    GrjbxxJzsMapper grjbxxJzsMapper;
    @Resource
    GrjbxxJbsMapper grjbxxJbsMapper;
    @Resource
    GrjbxxZysMapper grjbxxZysMapper;
    @Resource
    GrjbxxXmMapper grjbxxXmMapper;
    @Resource
    HazardinfoMapper hazardinfoMapper;
    @Resource
    DiseaseItemMapper diseaseItemMapper;


    @Resource
    CompanyinfoMapper companyinfoMapper;

    @Value("${newbase64png}")
    private String newbase64png;


    @Value("${base64png}")
    private String base64png;

    /**
     * 如果有就修改，没有就新增
     * @param grjbxx
     * @return
     */
    public GrjbxxResult insertAndUpdate(Grjbxx grjbxx){
        if(grjbxx == null){
            //抛出异常，非法参数异常..指定异常信息的内容
            return new GrjbxxResult(CommonCode.INVALID_PARAM,null);
        }
        QueryWrapper<Grjbxx> wrapper = new QueryWrapper<>();
        Grjbxx jbxx = new Grjbxx();
        jbxx.setSfz(grjbxx.getSfz());
        wrapper.setEntity(jbxx);
        Grjbxx grjbxx1 = grjbxxMapper.selectOne(wrapper);
        if (grjbxx1!=null) {
            if(StringUtil.nonNullRequired(grjbxx.getRes2())){
                if(StringUtil.nonNullRequired(grjbxx1.getRes2())&&!(grjbxx1.getRes2().equals(grjbxx.getRes2()))){
                    File file = new File(grjbxx1.getRes2().replace("newregister/",newbase64png));
                    FileUtil.deleteFileOrDir(file);
                }
                try {
                    String url = FileUtil.copeFile(grjbxx.getRes2(),newbase64png,grjbxx.getSfz());
                    grjbxx.setRes2(url);
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
            grjbxx.setId(grjbxx1.getId());
            if (grjbxx.getPersonalid()!=null&&grjbxx.getPersonalid().length()>0)
                grjbxx.setPersonalid(Long.toString(System.currentTimeMillis()));
            grjbxxMapper.updateById(grjbxx);
            File file = new File(base64png);
            FileUtil.deleteFileOrDir(file);
            return new GrjbxxResult(CommonCode.SUCCESS,grjbxx);
        }
        if(StringUtil.nonNullRequired(grjbxx.getRes2())){
            try {
                String url = FileUtil.copeFile(grjbxx.getRes2(),newbase64png,grjbxx.getSfz());
                grjbxx.setRes2(url);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        grjbxx.setCreatetime(new Date());
        grjbxx.setPersonalid(Long.toString(System.currentTimeMillis()));
        grjbxxMapper.insert(grjbxx);
        File file = new File(base64png);
        FileUtil.deleteFileOrDir(file);
        return new GrjbxxResult(CommonCode.SUCCESS,grjbxx);

    }




    /**
     * 新增
     * @param grjbxx
     * @return
     */
    public GrjbxxResult add(Grjbxx grjbxx){
        if(grjbxx == null){
            //抛出异常，非法参数异常..指定异常信息的内容
            return new GrjbxxResult(CommonCode.INVALID_PARAM,null);
        }
        if ("".equals(grjbxx.getCsrq())) {
            grjbxx.setCsrq(null);
        }
        grjbxx.setCreatetime(new Date());
        grjbxxMapper.insert(grjbxx);

        return new GrjbxxResult(CommonCode.SUCCESS,grjbxx);
    }

    /**
     * 修改
     * @param id
     * @param grjbxx
     * @return
     */
    public GrjbxxResult update(Long id , Grjbxx grjbxx){
        Grjbxx grjbxx1 = grjbxxMapper.selectById(id);
        if (grjbxx1!=null){
            grjbxxMapper.updateById(grjbxx);
            return new GrjbxxResult(CommonCode.SUCCESS,grjbxx);
        }
        return new GrjbxxResult(UserCode.USER_NOTEXISTS,null);
    }

    /**
     * 删除
     * @param id
     * @return
     */
    public GrjbxxResult delete(Long id){

        Grjbxx grjbxx1 = grjbxxMapper.selectById(id);
        if (grjbxx1!=null) {
            if(StringUtil.nonNullRequired(grjbxx1.getRes2())){
                File file = new File(grjbxx1.getRes2().replace("newregister/",newbase64png));
                FileUtil.deleteFileOrDir(file);
            }
             grjbxxMapper.deleteById(id);
            HashMap<String, Object> map = new HashMap<>();
            map.put("personalid",grjbxx1.getPersonalid());
             delSchedule(map);
             map.remove("personalid");
             map.put("sfz",grjbxx1.getSfz());

            grjbxxXmMapper.deleteByMap(map);

            return new GrjbxxResult(CommonCode.SUCCESS,grjbxx1);
        }
          return new GrjbxxResult(UserCode.USER_NOTEXISTS,null);
    }

    /**
     * 查询全部
     * @param grjbxx
     * @return
     */
    public QueryResponseResult select(Grjbxx grjbxx){
        if ("".equals(grjbxx.getTjrq())) {
            grjbxx.setTjrq(null);
        }

        QueryWrapper<Grjbxx> wrapper = new QueryWrapper<>();
        wrapper.setEntity(grjbxx);
        List<Grjbxx> grjbxxList = grjbxxMapper.selectList(wrapper);


        QueryResult queryResult = new QueryResult();

        queryResult.setList(grjbxxList);
        queryResult.setTotal(grjbxxList.size());
        QueryResponseResult queryResponseResult = new QueryResponseResult(CommonCode.SUCCESS,queryResult);
        return queryResponseResult;
    }
    public QueryResponseResult selectWhole(Grjbxx grjbxx){
        if ("".equals(grjbxx.getTjrq())) {
            grjbxx.setTjrq(null);
        }

        QueryWrapper<Grjbxx> wrapper = new QueryWrapper<>();
        wrapper.setEntity(grjbxx);
        List<Grjbxx> grjbxxList = grjbxxMapper.selectList(wrapper);
        if (!(grjbxxList!=null&&grjbxxList.size()>0))
            return  new QueryResponseResult(CommonCode.FAIL,null);
        HashMap<String, Object> map = new HashMap<>();
        List<GrjbxxWhole> list = new ArrayList<>();
        GrjbxxWhole grjbxxWhole = new GrjbxxWhole();
        if (grjbxxList.get(0).getPersonalid()!=null&&grjbxxList.get(0).getPersonalid().length()>0){
            map.put("personalid",grjbxxList.get(0).getPersonalid());
            List<Grjbxx_zys> grjbxx_zysList = grjbxxZysMapper.selectByMap(map);
            List<Grjbxx_ws> grjbxx_wsList = grjbxxWsMapper.selectByMap(map);
            List<Grjbxx_sx> grjbxx_sxList = grjbxxSxMapper.selectByMap(map);
            List<Grjbxx_ss> grjbxx_ssList = grjbxxSsMapper.selectByMap(map);
            List<Grjbxx_jbs> grjbxx_jbsList = grjbxxJbsMapper.selectByMap(map);
            List<Grjbxx_jzs> grjbxx_jzsList = grjbxxJzsMapper.selectByMap(map);
            grjbxxWhole.setGrjbxxJzs(grjbxx_jzsList);
            grjbxxWhole.setGrjbxxJbs(grjbxx_jbsList);
            grjbxxWhole.setGrjbxxSs(grjbxx_ssList);
            grjbxxWhole.setGrjbxxWs(grjbxx_wsList);
            grjbxxWhole.setGrjbxxZys(grjbxx_zysList);
            grjbxxWhole.setGrjbxxSx(grjbxx_sxList);
        }
        map.remove("personalid");
        map.put("sfz",grjbxxList.get(0).getSfz());
        List<Grjbxx_xm> grjbxx_xmList = grjbxxXmMapper.selectByMap(map);
        grjbxxWhole.setGrjbxxXm(grjbxx_xmList);
        grjbxxWhole.setGrjbxx(grjbxxList.get(0));
        list.add(grjbxxWhole);
        QueryResult queryResult = new QueryResult();
        queryResult.setList(list);
        queryResult.setTotal(list.size());
        QueryResponseResult queryResponseResult = new QueryResponseResult(CommonCode.SUCCESS,queryResult);
        return queryResponseResult;
    }


    /**
     * 用户查询方法
     * @param current  页码，从1开始计数
     * @param size  每页记录数
     * @param params  查询条件
     * @return
     */
    public QueryResponseResult findList(int current, int size, Map<String,Object> params){

        //分页参数
        if(current <=1){
            current = 0;
        } if  (current>1)
            current = current*10-10;

      //  current = current -1;
        if(size<=0){
            size = 10;
        }
        QueryResult queryResult = new QueryResult();
        String page =  String.valueOf(current)+","+String.valueOf(size);
        queryResult.setTotal(grjbxxMapper.queryCount(params));
        params.put("page",page);
        System.out.println("数据："+params);
        List<Grjbxx> grjbxxeList = grjbxxMapper.queryStuBaseByXmlPage(params);
        QueryResponseResult queryResponseResult = new QueryResponseResult(CommonCode.SUCCESS,queryResult);
        queryResult.setList(grjbxxeList);
        return queryResponseResult;
    }

    public static Date stringToDate(String strTime, String formatType) {
        SimpleDateFormat formatter = new SimpleDateFormat(formatType);
        Date date = null;
        try {
            date = formatter.parse(strTime);
        } catch (ParseException e) {
            e.printStackTrace();
        }

        return date;
    }


    public GrjbxxResult Import(MultipartFile excelFile) throws IOException {
        String name = excelFile.getOriginalFilename();
        String type = null;
        if (name.endsWith(".xls")) {
            type = "xls";
        }else if(name.endsWith(".xlsx")){
            type = "xlsx";
        }
        List<Object[]> list = ExcelUtils.Excel(excelFile.getInputStream(), type);

        List<Grjbxx> fail_list = new ArrayList<>();
        for (int i = 0; i < list.size(); i++) {
            Object[] obj = list.get(i);
            Grjbxx jbxx = new Grjbxx();
            Grjbxx_xm grjbxxXm = new Grjbxx_xm();//项目附表（显示项目必要）
            int k  = 0;
            try {
                jbxx.setName(DataTransformation(obj[k]));
                jbxx.setSex(DataTransformation(obj[++k]));
                jbxx.setMz(DataTransformation(obj[++k]));
                jbxx.setHyzk(DataTransformation(obj[++k]));
                jbxx.setSfz(DataTransformation(obj[++k]));
                jbxx.setCsrq(DataTransformation(obj[++k]));
                jbxx.setJycd(DataTransformation(obj[++k]));
                jbxx.setBrdh(DataTransformation(obj[++k]));
                jbxx.setBirthplace(DataTransformation(obj[++k]));
                jbxx.setFamilyaddress(DataTransformation(obj[++k]));
                jbxx.setCompanyname(DataTransformation(obj[++k]));
                jbxx.setCompanycode(DataTransformation(obj[++k]));
                jbxx.setGzgw(DataTransformation(obj[++k]));
                jbxx.setGzgwCode(DataTransformation(obj[++k]));
                jbxx.setTjlx(DataTransformation(obj[++k]));
                jbxx.setOrgname(DataTransformation(obj[++k]));
                jbxx.setOrgcode(DataTransformation(obj[++k]));
                jbxx.setPersonalid(String.valueOf(System.currentTimeMillis()));
                Grjbxx grjbxx = new Grjbxx();
                grjbxx.setSfz(jbxx.getSfz());
                QueryWrapper<Grjbxx> wrapper = new QueryWrapper<>();
                wrapper.setEntity(grjbxx);
                Grjbxx grjbxx1 = grjbxxMapper.selectOne(wrapper);

                //通过岗位编号查询危险因素(得到危险因素)
                List<HazardinfoRelation> hazardinfoRelations = hazardinfoMapper.selectNoPaging(jbxx.getGzgwCode());
                String whysqt = "";
                if(hazardinfoRelations.size()>0){
                    for (int j = 0; j <hazardinfoRelations.size() ; j++) {
                        whysqt += hazardinfoRelations.get(j).getHazardCode()+",";
                    }
                }
                whysqt= whysqt.substring(0,whysqt.length()-1);
                jbxx.setWhysqt(whysqt);
                //通过危险因素编码得到岗位
                List<DiseaseItemRelation> diseaseItemRelations = diseaseItemMapper.selectNoPaging(whysqt);
                String jcxm = "";//项目编码吗
                String jcxmname="";//项目名字
                for (int j = 0; j < diseaseItemRelations.size(); j++) {
                    jcxm+=diseaseItemRelations.get(j).getItemCode()+",";
                    jcxmname+=diseaseItemRelations.get(j).getIteamName()+",";
                }
                jcxm= jcxm.substring(0,jcxm.length()-1);
                jcxmname= jcxmname.substring(0,jcxmname.length()-1);


                grjbxxXm.setSfz(jbxx.getSfz());
                grjbxxXm.setName(jbxx.getName());
                grjbxxXm.setCompanyname(jbxx.getCompanyname());
                grjbxxXm.setCompanycode(jbxx.getCompanycode());
                grjbxxXm.setJcxmname(jcxmname);
                grjbxxXm.setJcxm(jcxm);


                if (grjbxx1!=null) {
                    jbxx.setId(grjbxx1.getId());
                    jbxx.setCreatetime(grjbxx1.getCreatetime());
                    grjbxxMapper.updateById(jbxx);
                    if(grjbxx.getSfz()!=null&&grjbxx.getSfz().length()>0){
                        Map<String,Object> params = new HashMap<>();
                        params.put("sfz", grjbxx.getSfz());
                        //先删除，后添加
                        grjbxxXmMapper.deleteByMap(params);
                        grjbxxXmMapper.insert(grjbxxXm);
                    }
                }else
                    grjbxxMapper.insert(jbxx);
                    //添加成功后，继续添加项目表中的数据
                    grjbxxXmMapper.insert(grjbxxXm);
            }catch ( Exception e){
                e.printStackTrace();
                fail_list.add(jbxx);
            }

        }
        if (fail_list!=null&&fail_list.size()>0) {
            File file1 = new File("e:\\同步个人信息失败人员.txt");
            file1.delete();
            FileFactory file = new FileFactory("e:\\", "同步个人信息失败人员.txt");
            file.createFile();
            file.openOutStream();
            for (int i = 0; i < fail_list.size(); i++) {
                file.writeContent("身份证号:"+fail_list.get(i).getSfz()+"姓名:"+fail_list.get(i).getName());
                System.out.println(fail_list.get(i).getSfz());
            }
            file.closeOutStream();
        }
        return  new GrjbxxResult(CommonCode.SUCCESS,null);

    }

    private static String DataTransformation(Object obj){
        boolean equals = obj==null||obj.equals("");

        return equals?null:obj.toString();
    }

    /**
     * 新增与修改所有的表
     * @param grjbxxWhole
     * @return
     */
    @Transactional(rollbackFor=Exception.class)
    public GrjbxxResult adddWhole(GrjbxxWhole grjbxxWhole) {
        if(grjbxxWhole.getGrjbxx() == null){
            //抛出异常，非法参数异常..指定异常信息的内容
            return new GrjbxxResult(CommonCode.INVALID_PARAM,null);
        }
        try {
            QueryWrapper<Grjbxx> wrapper = new QueryWrapper<>();
            Grjbxx jbxx = new Grjbxx();
            jbxx.setSfz(grjbxxWhole.getGrjbxx().getSfz());
            wrapper.setEntity(jbxx);
            Grjbxx grjbxx1 = grjbxxMapper.selectOne(wrapper);
            if (grjbxx1!=null) {
                HashMap<String, Object> map = new HashMap<>();
                map.put("personalid",grjbxx1.getPersonalid());
                //删除附表
                delSchedule(map);
                //添加附表
                addSchedule(grjbxxWhole);
                grjbxxWhole.getGrjbxx().setId(grjbxx1.getId());
                grjbxxMapper.updateById(grjbxxWhole.getGrjbxx());
                return new GrjbxxResult(CommonCode.SUCCESS,grjbxxWhole.getGrjbxx());
            }
            grjbxxWhole.getGrjbxx().setPersonalid(Long.toString(System.currentTimeMillis()));
            //添加附表
            addSchedule(grjbxxWhole);
            grjbxxWhole.getGrjbxx().setCreatetime(new Date());
            grjbxxMapper.insert(grjbxxWhole.getGrjbxx());
            return new GrjbxxResult(CommonCode.SUCCESS,grjbxxWhole.getGrjbxx());
        }catch (Exception e) {
            e.printStackTrace();
            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
           /* // 会回滚
            throw new RuntimeException("注释");*/
            return new GrjbxxResult(CommonCode.FAIL,null);

        }



    }

    /**
     * 删除所有附表
     * @param map
     */
    private void delSchedule(Map<String,Object> map){
        grjbxxJzsMapper.deleteByMap(map);
        grjbxxJbsMapper.deleteByMap(map);
        grjbxxSsMapper.deleteByMap(map);
        grjbxxSxMapper.deleteByMap(map);
        grjbxxWsMapper.deleteByMap(map);
        grjbxxZysMapper.deleteByMap(map);
    }
    /**
     * 新增所有附表
     * @param grjbxxWhole
     */
    private   void   addSchedule(GrjbxxWhole grjbxxWhole){
        //疾病史
         if(isNullObject(grjbxxWhole.getJbxxJbs())){
             if (grjbxxWhole.getJbxxJbs().getJbsdm().contains("13")) {
                 String[] qzsj = grjbxxWhole.getJbxxJbs().getQzsj().split(",");
                 String[] qtjbs = grjbxxWhole.getJbxxJbs().getQtjbs().split(",");
                 for (int i = 0; i < qzsj.length; i++) {
                     Grjbxx_jbs grjbxx_jbs = new Grjbxx_jbs();
                     grjbxx_jbs.setId(null);
                     grjbxx_jbs.setQtjbs(qtjbs[i]);
                     grjbxx_jbs.setQzsj(qzsj[i]);
                     grjbxx_jbs.setJbsdm(grjbxxWhole.getJbxxJbs().getJbsdm());
                     grjbxx_jbs.setZybms(grjbxxWhole.getJbxxJbs().getZybms());
                     grjbxx_jbs.setExzlms(grjbxxWhole.getJbxxJbs().getExzlms());
                     grjbxx_jbs.setPersonalid(grjbxxWhole.getGrjbxx().getPersonalid());
                     grjbxxJbsMapper.insert(grjbxx_jbs);
                 }
             }else {
                 //调用dao新增
                 grjbxxWhole.getJbxxJbs().setId(null);
                 grjbxxWhole.getJbxxJbs().setPersonalid(grjbxxWhole.getGrjbxx().getPersonalid());
                 grjbxxJbsMapper.insert(grjbxxWhole.getJbxxJbs());
             }

         }
         //家族史
        if (isNullObject(grjbxxWhole.getJbxxJzs())) {
            String[] jbdm = grjbxxWhole.getJbxxJzs().getJzsjbdm().split(";");
            String[] other = grjbxxWhole.getJbxxJzs().getJzsOther().split(";");
            for (int i = 0; i < jbdm.length; i++) {
                Grjbxx_jzs grjbxx_jzs = new Grjbxx_jzs();
                grjbxx_jzs.setId(null);
                try {
                    grjbxx_jzs.setJzsOther(other[i]);
                }catch (Exception e){
                    grjbxx_jzs.setJzsOther(null);
                }

                grjbxx_jzs.setPersonalid( grjbxxWhole.getGrjbxx().getPersonalid());
                grjbxx_jzs.setJzsgx(Integer.toString(i+1));
                grjbxx_jzs.setJzsjbdm(jbdm[i]);
                grjbxxJzsMapper.insert(grjbxx_jzs);
            }
        }
        //输血
        if (isNullObject(grjbxxWhole.getJbxxSx())) {
            if (grjbxxWhole.getJbxxSx().getSfsx().equals("1")) {
                grjbxxWhole.getJbxxSx().setId(null);
                grjbxxWhole.getJbxxSx().setPersonalid(grjbxxWhole.getGrjbxx().getPersonalid());
                grjbxxSxMapper.insert(grjbxxWhole.getJbxxSx());

            }else {
                String[] sxsj = grjbxxWhole.getJbxxSx().getSxsj().split(",");
                String[] sxyy = grjbxxWhole.getJbxxSx().getSxyy().split(",");
                for (int i = 0; i < sxsj.length; i++) {
                    Grjbxx_sx grjbxx_sx = new Grjbxx_sx();
                    grjbxx_sx.setId(null);
                    grjbxx_sx.setPersonalid(grjbxxWhole.getGrjbxx().getPersonalid());
                    grjbxx_sx.setSxsj(sxsj[i]);
                    grjbxx_sx.setSxyy(sxyy[i]);
                    grjbxx_sx.setSfsx("2");
                    grjbxxSxMapper.insert(grjbxx_sx);
                }
            }
        }
        //外伤
        if (isNullObject(grjbxxWhole.getJbxxWs())) {
            if (grjbxxWhole.getJbxxWs().getSfws().contains("1")) {
                //调用dao新增
                grjbxxWhole.getJbxxWs().setId(null);//id自增
                grjbxxWhole.getJbxxWs().setPersonalid(grjbxxWhole.getGrjbxx().getPersonalid());
                grjbxxWsMapper.insert(grjbxxWhole.getJbxxWs());
            }else {
                String[] wsmc = grjbxxWhole.getJbxxWs().getWsmc().split(",");
                String[] wssj = grjbxxWhole.getJbxxWs().getWssj().split(",");
                for (int i = 0; i < wsmc.length; i++) {
                    Grjbxx_ws grjbxx_ws = new Grjbxx_ws();
                    grjbxx_ws.setId(null);
                    grjbxx_ws.setPersonalid(grjbxxWhole.getGrjbxx().getPersonalid());
                    grjbxx_ws.setWsmc(wsmc[i]);
                    grjbxx_ws.setWssj(wssj[i]);
                    grjbxx_ws.setSfws("2");
                    grjbxxWsMapper.insert(grjbxx_ws);

                }
            }

        }
        //手术
        if (isNullObject(grjbxxWhole.getJbxxSs())) {
            if (grjbxxWhole.getJbxxSs().getSfss().equals("1")) {
                //调用dao新增
                grjbxxWhole.getJbxxSs().setId(null);//id自增
                grjbxxWhole.getJbxxSs().setPersonalid(grjbxxWhole.getGrjbxx().getPersonalid());
                grjbxxSsMapper.insert(grjbxxWhole.getJbxxSs());
            }else {
                String[] ssmc = grjbxxWhole.getJbxxSs().getSsmc().split(",");
                String[] sssj = grjbxxWhole.getJbxxSs().getSssj().split(",");
                for (int i = 0; i < ssmc.length; i++) {
                    Grjbxx_ss grjbxx_ss = new Grjbxx_ss();
                    grjbxx_ss.setId(null);
                    grjbxx_ss.setSfss("2");
                    grjbxx_ss.setSsmc(ssmc[i]);
                    grjbxx_ss.setSssj(sssj[i]);
                    grjbxx_ss.setPersonalid(grjbxxWhole.getGrjbxx().getPersonalid());
                    grjbxxSsMapper.insert(grjbxx_ss);
                }
            }

        }
        //职业史
        if (isNullObject(grjbxxWhole.getJbxxZys())) {
            String[] qzrq = grjbxxWhole.getJbxxZys().getQzrq().split(",");
            String[] jssj = grjbxxWhole.getJbxxZys().getJssj().split(",");
            String[] fhcs = grjbxxWhole.getJbxxZys().getFhcs().split(",");
            String[] cj = grjbxxWhole.getJbxxZys().getCj().split(",");
            String[] gz = grjbxxWhole.getJbxxZys().getGz().split(",");
            String[] gzdw = grjbxxWhole.getJbxxZys().getGzdw().split(",");
            String[] yhys = grjbxxWhole.getJbxxZys().getYhys().split(",");
            for (int i = 0; i < qzrq.length; i++) {
                Grjbxx_zys grjbxx_zys = new Grjbxx_zys();
                grjbxx_zys.setId(null);
                grjbxx_zys.setQzrq(qzrq[i]);
                grjbxx_zys.setCj(cj[i]);
                grjbxx_zys.setFhcs(fhcs[i]);
                grjbxx_zys.setGz(gz[i]);
                grjbxx_zys.setYhys(yhys[i]);
                grjbxx_zys.setJssj(jssj[i]);
                grjbxx_zys.setGzdw(gzdw[i]);
                grjbxx_zys.setPersonalid(grjbxxWhole.getGrjbxx().getPersonalid());
                grjbxxZysMapper.insert(grjbxx_zys);
            }
        }



    }

    private Boolean isNullObject(Object obj){
        return  obj!=null&&!"".equals(obj)?true:false;
    }







    //企业职工体检进度

    public  QueryResultSta  selecsta(Map<String, Object> params){


        QueryResultSta queryResultSta = new QueryResultSta();
       // params.put("companycode", "1001");
        System.out.println("=======企业进度查询======");
        //未体检人数
        params.put("res1", "2");
        int weitijiancount =  grjbxxMapper.queryCount(params);
        queryResultSta.setWeitijian(weitijiancount);
        //已体检人数
        params.remove("res1");
        params.put("res1","1");
        int yitijiancount = grjbxxMapper.queryCount(params);
        queryResultSta.setYitijiancount(yitijiancount);
        //应体检人数
        int yingtijiancount = weitijiancount + yitijiancount;
        queryResultSta.setYingtjiancount(yingtijiancount);


        QueryWrapper<Companyinfo> wrapper = new QueryWrapper<>();
        Companyinfo companyinfo = new Companyinfo();
        companyinfo.setCompanycode((String)params.get("companycode"));
        wrapper.setEntity(companyinfo);
        List<Companyinfo> companyinfos = companyinfoMapper.selectList(wrapper);
        if(companyinfos!=null&&companyinfos.size()>0){
            queryResultSta.setPhone(companyinfos.get(0).getPhone());
            queryResultSta.setCompanyname(companyinfos.get(0).getCompanyname());
            queryResultSta.setLinkman(companyinfos.get(0).getLinkman());
        }
        System.out.println("----------结果集----------："+queryResultSta.toString());
        return queryResultSta;
    }

    public QueryResponseResult ProgList(int current, int size, Grjbxx grjbxx) {
        if (grjbxx == null) {
            grjbxx = new Grjbxx();
        }
        //分页参数
        if (current <= 0) {
            current = 1;
        }
//        current = current - 1;

        if (size <= 0) {
            size = 10;
        }
        IPage<Grjbxx> grjbxxIPage = null;

        IPage<Grjbxx> page = new Page<>(current, size);
        QueryWrapper<Grjbxx> wrapper = new QueryWrapper<>();
        wrapper.setEntity(grjbxx);
        grjbxxIPage = grjbxxMapper.selectPage(page,wrapper);
        QueryResult queryResult = new QueryResult();
        List<GrjbxxProg> grjbxxProgs = new ArrayList<>();
        List<Grjbxx> grjbxxs = grjbxxIPage.getRecords();
        for(int i=0;i<grjbxxs.size();i++){
            Grjbxx grjbxx1 = new Grjbxx();
            grjbxx1 = grjbxxs.get(i);
            GrjbxxProg prog = new GrjbxxProg();
            prog.setCompanyname(grjbxx1.getCompanyname());
            prog.setGzgw(grjbxx1.getGzgw());
            prog.setName(grjbxx1.getName());
            prog.setPhone(grjbxx1.getBrdh());
            prog.setYtjxms(5);
            prog.setYtjxm("五官科体检,症状体检,神经科体检,内科体检,外科体检");
            Integer wtjxms = 0;
            String wtjxm = null;
            Integer notjxms = 0;
            String notjxm = null;
            if(grjbxx1.getTjflag()!=null&&grjbxx1.getTjflag().equals("1")){
                wtjxms += 1;
                wtjxm += "五官科体检,";
            }else{
                notjxms += 1;
                notjxm += "五官科体检,";
            }
            if(grjbxx1.getTjflagzz()!=null&&grjbxx1.getTjflagzz().equals("1")){
                wtjxms += 1;
                wtjxm += "症状体检,";
            }else{
                notjxms += 1;
                notjxm += "症状体检,";
            }
            if(grjbxx1.getTjflagsjk()!=null&&grjbxx1.getTjflagsjk().equals("1")){
                wtjxms += 1;
                wtjxm += "神经科体检,";
            }else{
                notjxms += 1;
                notjxm += "神经科体检,";
            }
            if(grjbxx1.getTjflagnk()!=null&&grjbxx1.getTjflagnk().equals("1")){
                wtjxms += 1;
                wtjxm += "内科体检,";
            }else{
                notjxms += 1;
                notjxm += "内科体检,";
            }
            if(grjbxx1.getTjflagwk()!=null&&grjbxx1.getTjflagwk().equals("1")){
                wtjxms += 1;
                wtjxm += "外科体检,";
            }else{
                notjxms += 1;
                notjxm += "外科体检,";
            }
            if(notjxm==null||notjxm.length()==0||notjxm=="null"){
                prog.setNotjxm(notjxm);
            }else{
                prog.setNotjxm(notjxm.substring(4, notjxm.length()-1));
            }
            prog.setNotjxms(notjxms);
            if(wtjxm==null||wtjxm.length()==0||wtjxm=="null"){
                prog.setWtjxm(wtjxm);
            }else{
                prog.setWtjxm(wtjxm.substring(4, wtjxm.length()-1));
            }
            prog.setWtjxms(wtjxms);
            prog.setTmh(grjbxx1.getTmh());
            grjbxxProgs.add(prog);
        }
        queryResult.setList(grjbxxProgs);//数据列表
        queryResult.setTotal(grjbxxIPage.getTotal());//数据总记录数
        QueryResponseResult queryResponseResult = new QueryResponseResult(CommonCode.SUCCESS, queryResult);
        return queryResponseResult;
    }


    public String getBase64(String path,String str){
        try {
            return FileUtil.getBase64(path,str);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }
    //项目情况查询
    public List<ProjectState> getProject(String tmh){
        Map<String,Object> map = new HashMap();
        map.put("tmh", tmh);
        List<Grjbxx_xm> grjbxx_xms = grjbxxXmMapper.selectByMap(map);//得到个人项目
        List<Grjbxx> grjbxxes = grjbxxMapper.selectByMap(map);//得到状态
        Grjbxx grjbxx = new Grjbxx();
        if(grjbxxes!=null&&grjbxxes.size()>0){
            grjbxx =grjbxxes.get(0);
        }
        String tlflagzz = grjbxx.getTjflagzz();
        String jcxmname = grjbxx_xms.get(0).getJcxmname();
        String[] jcxmcode = grjbxx_xms.get(0).getJcxm().split(",");
        List<ProjectState> projectStateList = new ArrayList();

        for (int i = 0; i < jcxmcode.length; i++) {
            QueryWrapper<DiseaseItem> wrapper = new QueryWrapper<>();
            DiseaseItem diseaseItem = diseaseItemMapper.selectOne(wrapper.eq("item_code", jcxmcode[i]));
            ProjectState projectState = new ProjectState();
            projectState.setProjctName(diseaseItem.getIteamName());
            if(StringUtil.nonNullRequired(grjbxx.getTjflagzz())&&"1".equals(grjbxx.getTjflagzz())){//标识此人症状项目已经做完了
                projectState.setState("1");
            }else{
                projectState.setState("0");
            }
            projectStateList.add(projectState);
        }

        System.out.println("===========:"+projectStateList.toString());
        return projectStateList;

    }



}
