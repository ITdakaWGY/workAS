package com.as.occupationaldseases.service;


import com.as.occupationaldseases.common.response.CommonCode;
import com.as.occupationaldseases.common.response.QueryResponseResult;
import com.as.occupationaldseases.common.response.QueryResult;
import com.as.occupationaldseases.dao.SysMenuMapper;
import com.as.occupationaldseases.domain.sysMenu.SysMenu;
import com.as.occupationaldseases.domain.sysMenu.responce.SysMenuCode;
import com.as.occupationaldseases.domain.sysMenu.responce.SysMenuResult;
import com.as.occupationaldseases.exception.ExceptionCast;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

@Service
public class SysMenuService {

    @Resource
    private SysMenuMapper sysMenuMapper;


    //新增
    public SysMenuResult add(SysMenu sysMenu) {
        if (sysMenu == null) {
            //抛出异常，非法参数异常..指定异常信息的内容
            return new SysMenuResult(CommonCode.INVALID_PARAM, null);
        }
        //校验用户Id的唯一性
        //根据用户Id集合，如果查到说明此用户已经存在，如果查询不到再继续添加
        SysMenu sysMenu1 = sysMenuMapper.selectById(sysMenu.getId());
        if (sysMenu1 != null) {
            //用户已经存在
            //抛出异常，异常内容就是用户已经存在
            ExceptionCast.cast(SysMenuCode.SYSMENU_ADD_EXISTSNAME);
        }
        //调用dao新增用户
        sysMenuMapper.insert(sysMenu);
        return new SysMenuResult(CommonCode.SUCCESS, sysMenu);

    }


    //根据id修改
    public SysMenuResult update(int id, SysMenu sysMenu) {
        //根据id从数据库查询页面信息
        SysMenu one = sysMenuMapper.selectById(id);
        if (one != null) {
            //提交修改
            sysMenuMapper.updateById(sysMenu);
            return new SysMenuResult(CommonCode.SUCCESS, sysMenu);
        }
        //修改失败
        return new SysMenuResult(SysMenuCode.SYSMENU_NOTEXISTS, null);
    }


    //根据id删除
    public SysMenuResult delete(int id) {
        //先查询一下
        SysMenu sysMenu = sysMenuMapper.selectById(id);
        if (sysMenu != null) {
            sysMenuMapper.deleteById(id);
            return new SysMenuResult(CommonCode.SUCCESS, sysMenu);
        }
        return new SysMenuResult(SysMenuCode.SYSMENU_NOTEXISTS, null);
    }


    /**
     * 分页查询方法
     *
     * @param current       页码，从1开始记数
     * @param size          每页记录数
     * @param sysMenu 查询条件
     * @return
     */
    public QueryResponseResult findList(int current, int size, SysMenu sysMenu) {
        if (sysMenu == null) {
            sysMenu = new SysMenu();
        }
        //分页参数
        if (current <= 0) {
            current = 1;
        }
//        current = current - 1;

        if (size <= 0) {
            size = 10;
        }
        IPage<SysMenu> page = new Page<>(current, size);
        QueryWrapper<SysMenu> wrapper = new QueryWrapper<>();
        wrapper.setEntity(sysMenu);

        IPage<SysMenu> companyinfoIPage = sysMenuMapper.selectPage(page, wrapper);
        QueryResult queryResult = new QueryResult();

        queryResult.setList(companyinfoIPage.getRecords());//数据列表
        queryResult.setTotal(companyinfoIPage.getTotal());//数据总记录数
        QueryResponseResult queryResponseResult = new QueryResponseResult(CommonCode.SUCCESS, queryResult);
        return queryResponseResult;
    }


    //查询单条数据
    public SysMenuResult findBySingle(SysMenu sysMenu) {
        QueryWrapper<SysMenu> wrapper = new QueryWrapper<>();
        wrapper.setEntity(sysMenu);
        Integer row = sysMenuMapper.selectCount(wrapper);
        if (row == 1) {
            return new SysMenuResult(CommonCode.SUCCESS, sysMenuMapper.selectOne(wrapper));
        } else if (row > 1) {
            return new SysMenuResult(SysMenuCode.SYSMENU_GREATERTHAN, null);
        }
        return new SysMenuResult(SysMenuCode.SYSMENU_NOTEXISTS, null);
    }

}
